name: Protobuf

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
    - master
  release:
    types: [published]

jobs:
  lint:
    runs-on: ubuntu-latest
    name: Run Buf linter

    steps:
      - uses: actions/checkout@v2

      - name: Lint the schemas
        run: |
          make buf-lint

      - name: Upload output
        uses: actions/upload-artifact@v1
        with:
          name: buf-lint
          path: buf-lint

  breaking:
    needs: lint
    runs-on: ubuntu-latest
    name: Detect breaking changes

    steps:
      - uses: actions/checkout@v2

      - name: Download linter output
        uses: actions/download-artifact@v1
        with:
          name: buf-lint

      - name: Run breaking change detection
        run: |
          make buf-check-breaking

      - name: Upload output
        uses: actions/upload-artifact@v1
        with:
          name: buf-check-breaking
          path: buf-check-breaking

  stubs:
    needs: lint
    runs-on: macos-latest
    name: Check stubs are up-to-date

    steps:
      - uses: actions/checkout@v2

      - name: Download linter output
        uses: actions/download-artifact@v1
        with:
          name: buf-lint

      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: '3.7'

      - name: Set up Java
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Set up NodeJS
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'

      - name: Set up Swift 
        run: brew install swift-protobuf

      - name: Build stubs
        run: |
          make stubs

  publish:
    needs: stubs
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && !failure()

    steps:
      - uses: actions/checkout@v1

      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: '3.7'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine

      - name: Build
        run: |
          python setup.py sdist bdist_wheel

      - name: Publish
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
          BINTRAY_USERNAME: ${{ secrets.BINTRAY_USER }}
          BINTRAY_KEY: ${{ secrets.BINTRAY_KEY }}
        run: |
          twine upload --verbose dist/*
          ./jvm/gradlew bintray

  publish_pods: 
    needs: stubs
    runs-on: macOS-latest
    if: github.event_name == 'release' && !failure()

    steps:
    - uses: actions/checkout@v1

    - name: Install Cocoapods
      run: gem install cocoapods

    - name: Deploy to Cocoapods
      env:
        COCOAPODS_TRUNK_TOKEN: ${{ secrets.COCOAPODS_TRUNK_TOKEN }}
      run: |
        set -eo pipefail
        export LIB_VERSION=$(git describe --tags `git rev-list --tags --max-count=1` | sed -e 's/v//g')
        pod lib lint --allow-warnings
        pod trunk push --allow-warnings
      
    
