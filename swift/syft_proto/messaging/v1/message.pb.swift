// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: syft_proto/messaging/v1/message.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct SyftProto_Messaging_V1_SyftMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var contents: OneOf_Contents? {
    get {return _storage._contents}
    set {_uniqueStorage()._contents = newValue}
  }

  var contentsEmptyMsg: SwiftProtobuf.Google_Protobuf_Empty {
    get {
      if case .contentsEmptyMsg(let v)? = _storage._contents {return v}
      return SwiftProtobuf.Google_Protobuf_Empty()
    }
    set {_uniqueStorage()._contents = .contentsEmptyMsg(newValue)}
  }

  /// ForceObjectDeleteMessage contents_delete_msg = 2;
  /// GetShapeMessage contents_get_shape_msg = 3;
  /// IsNoneMessage contents_is_none_msg = 4;
  var contentsObjectMsg: SyftProto_Messaging_V1_ObjectMessage {
    get {
      if case .contentsObjectMsg(let v)? = _storage._contents {return v}
      return SyftProto_Messaging_V1_ObjectMessage()
    }
    set {_uniqueStorage()._contents = .contentsObjectMsg(newValue)}
  }

  /// ObjectRequestMessage contents_object_request_msg = 6;
  var contentsOperationMsg: SyftProto_Messaging_V1_OperationMessage {
    get {
      if case .contentsOperationMsg(let v)? = _storage._contents {return v}
      return SyftProto_Messaging_V1_OperationMessage()
    }
    set {_uniqueStorage()._contents = .contentsOperationMsg(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Contents: Equatable {
    case contentsEmptyMsg(SwiftProtobuf.Google_Protobuf_Empty)
    /// ForceObjectDeleteMessage contents_delete_msg = 2;
    /// GetShapeMessage contents_get_shape_msg = 3;
    /// IsNoneMessage contents_is_none_msg = 4;
    case contentsObjectMsg(SyftProto_Messaging_V1_ObjectMessage)
    /// ObjectRequestMessage contents_object_request_msg = 6;
    case contentsOperationMsg(SyftProto_Messaging_V1_OperationMessage)

  #if !swift(>=4.1)
    static func ==(lhs: SyftProto_Messaging_V1_SyftMessage.OneOf_Contents, rhs: SyftProto_Messaging_V1_SyftMessage.OneOf_Contents) -> Bool {
      switch (lhs, rhs) {
      case (.contentsEmptyMsg(let l), .contentsEmptyMsg(let r)): return l == r
      case (.contentsObjectMsg(let l), .contentsObjectMsg(let r)): return l == r
      case (.contentsOperationMsg(let l), .contentsOperationMsg(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct SyftProto_Messaging_V1_ObjectMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var tensor: SyftProto_Types_Torch_V1_TorchTensor {
    get {return _storage._tensor ?? SyftProto_Types_Torch_V1_TorchTensor()}
    set {_uniqueStorage()._tensor = newValue}
  }
  /// Returns true if `tensor` has been explicitly set.
  var hasTensor: Bool {return _storage._tensor != nil}
  /// Clears the value of `tensor`. Subsequent reads from it will return its default value.
  mutating func clearTensor() {_uniqueStorage()._tensor = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct SyftProto_Messaging_V1_OperationMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var operation: SyftProto_Execution_V1_Operation {
    get {return _storage._operation ?? SyftProto_Execution_V1_Operation()}
    set {_uniqueStorage()._operation = newValue}
  }
  /// Returns true if `operation` has been explicitly set.
  var hasOperation: Bool {return _storage._operation != nil}
  /// Clears the value of `operation`. Subsequent reads from it will return its default value.
  mutating func clearOperation() {_uniqueStorage()._operation = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "syft_proto.messaging.v1"

extension SyftProto_Messaging_V1_SyftMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SyftMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "contents_empty_msg"),
    5: .standard(proto: "contents_object_msg"),
    7: .standard(proto: "contents_operation_msg"),
  ]

  fileprivate class _StorageClass {
    var _contents: SyftProto_Messaging_V1_SyftMessage.OneOf_Contents?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _contents = source._contents
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: SwiftProtobuf.Google_Protobuf_Empty?
          if let current = _storage._contents {
            try decoder.handleConflictingOneOf()
            if case .contentsEmptyMsg(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._contents = .contentsEmptyMsg(v)}
        case 5:
          var v: SyftProto_Messaging_V1_ObjectMessage?
          if let current = _storage._contents {
            try decoder.handleConflictingOneOf()
            if case .contentsObjectMsg(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._contents = .contentsObjectMsg(v)}
        case 7:
          var v: SyftProto_Messaging_V1_OperationMessage?
          if let current = _storage._contents {
            try decoder.handleConflictingOneOf()
            if case .contentsOperationMsg(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._contents = .contentsOperationMsg(v)}
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._contents {
      case .contentsEmptyMsg(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .contentsObjectMsg(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      case .contentsOperationMsg(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SyftProto_Messaging_V1_SyftMessage, rhs: SyftProto_Messaging_V1_SyftMessage) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._contents != rhs_storage._contents {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SyftProto_Messaging_V1_ObjectMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ObjectMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tensor"),
  ]

  fileprivate class _StorageClass {
    var _tensor: SyftProto_Types_Torch_V1_TorchTensor? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _tensor = source._tensor
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._tensor)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._tensor {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SyftProto_Messaging_V1_ObjectMessage, rhs: SyftProto_Messaging_V1_ObjectMessage) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._tensor != rhs_storage._tensor {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SyftProto_Messaging_V1_OperationMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".OperationMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "operation"),
  ]

  fileprivate class _StorageClass {
    var _operation: SyftProto_Execution_V1_Operation? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _operation = source._operation
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._operation)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._operation {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SyftProto_Messaging_V1_OperationMessage, rhs: SyftProto_Messaging_V1_OperationMessage) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._operation != rhs_storage._operation {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
