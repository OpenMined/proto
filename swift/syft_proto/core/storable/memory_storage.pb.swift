// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: syft_proto/core/storable/memory_storage.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct SyftProto_Core_Storable_V1_StorableType {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var storableInt32: Int32 = 0

  public var storableInt64: Int64 = 0

  public var storableString: String = String()

  public var storableTuple: [SyftProto_Core_Storable_V1_StorableType] = []

  public var storableList: [SyftProto_Core_Storable_V1_StorableType] = []

  public var storableMap: [SyftProto_Core_Storable_V1_StorableType.StorableMapping] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct StorableMapping {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var key: SyftProto_Core_Storable_V1_StorableType {
      get {return _key ?? SyftProto_Core_Storable_V1_StorableType()}
      set {_key = newValue}
    }
    /// Returns true if `key` has been explicitly set.
    public var hasKey: Bool {return self._key != nil}
    /// Clears the value of `key`. Subsequent reads from it will return its default value.
    public mutating func clearKey() {self._key = nil}

    public var value: SyftProto_Core_Storable_V1_StorableType {
      get {return _value ?? SyftProto_Core_Storable_V1_StorableType()}
      set {_value = newValue}
    }
    /// Returns true if `value` has been explicitly set.
    public var hasValue: Bool {return self._value != nil}
    /// Clears the value of `value`. Subsequent reads from it will return its default value.
    public mutating func clearValue() {self._value = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _key: SyftProto_Core_Storable_V1_StorableType? = nil
    fileprivate var _value: SyftProto_Core_Storable_V1_StorableType? = nil
  }

  public init() {}
}

public struct SyftProto_Core_Storable_V1_StorableObject {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var key: SyftProto_Common_V1_UID {
    get {return _key ?? SyftProto_Common_V1_UID()}
    set {_key = newValue}
  }
  /// Returns true if `key` has been explicitly set.
  public var hasKey: Bool {return self._key != nil}
  /// Clears the value of `key`. Subsequent reads from it will return its default value.
  public mutating func clearKey() {self._key = nil}

  public var data: SyftProto_Core_Storable_V1_StorableType {
    get {return _data ?? SyftProto_Core_Storable_V1_StorableType()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {self._data = nil}

  public var description_p: String = String()

  public var tags: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _key: SyftProto_Common_V1_UID? = nil
  fileprivate var _data: SyftProto_Core_Storable_V1_StorableType? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "syft_proto.core.storable.v1"

extension SyftProto_Core_Storable_V1_StorableType: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StorableType"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "storable_int32"),
    2: .standard(proto: "storable_int64"),
    3: .standard(proto: "storable_string"),
    4: .standard(proto: "storable_tuple"),
    5: .standard(proto: "storable_list"),
    6: .standard(proto: "storable_map"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.storableInt32)
      case 2: try decoder.decodeSingularInt64Field(value: &self.storableInt64)
      case 3: try decoder.decodeSingularStringField(value: &self.storableString)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.storableTuple)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.storableList)
      case 6: try decoder.decodeRepeatedMessageField(value: &self.storableMap)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.storableInt32 != 0 {
      try visitor.visitSingularInt32Field(value: self.storableInt32, fieldNumber: 1)
    }
    if self.storableInt64 != 0 {
      try visitor.visitSingularInt64Field(value: self.storableInt64, fieldNumber: 2)
    }
    if !self.storableString.isEmpty {
      try visitor.visitSingularStringField(value: self.storableString, fieldNumber: 3)
    }
    if !self.storableTuple.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.storableTuple, fieldNumber: 4)
    }
    if !self.storableList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.storableList, fieldNumber: 5)
    }
    if !self.storableMap.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.storableMap, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: SyftProto_Core_Storable_V1_StorableType, rhs: SyftProto_Core_Storable_V1_StorableType) -> Bool {
    if lhs.storableInt32 != rhs.storableInt32 {return false}
    if lhs.storableInt64 != rhs.storableInt64 {return false}
    if lhs.storableString != rhs.storableString {return false}
    if lhs.storableTuple != rhs.storableTuple {return false}
    if lhs.storableList != rhs.storableList {return false}
    if lhs.storableMap != rhs.storableMap {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SyftProto_Core_Storable_V1_StorableType.StorableMapping: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = SyftProto_Core_Storable_V1_StorableType.protoMessageName + ".StorableMapping"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._key)
      case 2: try decoder.decodeSingularMessageField(value: &self._value)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._key {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._value {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: SyftProto_Core_Storable_V1_StorableType.StorableMapping, rhs: SyftProto_Core_Storable_V1_StorableType.StorableMapping) -> Bool {
    if lhs._key != rhs._key {return false}
    if lhs._value != rhs._value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SyftProto_Core_Storable_V1_StorableObject: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StorableObject"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "data"),
    3: .same(proto: "description"),
    4: .same(proto: "tags"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._key)
      case 2: try decoder.decodeSingularMessageField(value: &self._data)
      case 3: try decoder.decodeSingularStringField(value: &self.description_p)
      case 4: try decoder.decodeRepeatedStringField(value: &self.tags)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._key {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 3)
    }
    if !self.tags.isEmpty {
      try visitor.visitRepeatedStringField(value: self.tags, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: SyftProto_Core_Storable_V1_StorableObject, rhs: SyftProto_Core_Storable_V1_StorableObject) -> Bool {
    if lhs._key != rhs._key {return false}
    if lhs._data != rhs._data {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.tags != rhs.tags {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
