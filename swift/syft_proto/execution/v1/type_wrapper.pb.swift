// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: syft_proto/execution/v1/type_wrapper.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct SyftProto_Execution_V1_type {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///
  ///A type contains the serialization id and string bytes.
  var id: Int32 = 0

  var type: Data = SwiftProtobuf.Internal.emptyData

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///
///In a nested type we can have 4 scenarios:
///1. A type.
///2. A list of types.
///3. A tuple of types.
///4. A dict of types.
///As fields are all optionals in proto3, only one field  from this message should exist.
struct SyftProto_Execution_V1_NestedTypeWrapper {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// First case, our message contains a type.
  var nestedType: SyftProto_Execution_V1_type {
    get {return _nestedType ?? SyftProto_Execution_V1_type()}
    set {_nestedType = newValue}
  }
  /// Returns true if `nestedType` has been explicitly set.
  var hasNestedType: Bool {return self._nestedType != nil}
  /// Clears the value of `nestedType`. Subsequent reads from it will return its default value.
  mutating func clearNestedType() {self._nestedType = nil}

  /// Second case, our message contains a list of nested types.
  var nestedTypeList: [SyftProto_Execution_V1_NestedTypeWrapper] = []

  /// Third case, our message contains a tuple of nested types.
  var nestedTypeTuple: [SyftProto_Execution_V1_NestedTypeWrapper] = []

  /// Fourth case, our message contains a dict of nested types.
  var nestedTypeDict: [SyftProto_Execution_V1_NestedTypeWrapper.key_value] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Message defined to simulate the behavior of a generic map.
  struct key_value {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var key: Data = SwiftProtobuf.Internal.emptyData

    var value: SyftProto_Execution_V1_NestedTypeWrapper {
      get {return _value ?? SyftProto_Execution_V1_NestedTypeWrapper()}
      set {_value = newValue}
    }
    /// Returns true if `value` has been explicitly set.
    var hasValue: Bool {return self._value != nil}
    /// Clears the value of `value`. Subsequent reads from it will return its default value.
    mutating func clearValue() {self._value = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _value: SyftProto_Execution_V1_NestedTypeWrapper? = nil
  }

  init() {}

  fileprivate var _nestedType: SyftProto_Execution_V1_type? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "syft_proto.execution.v1"

extension SyftProto_Execution_V1_type: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".type"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.id)
      case 2: try decoder.decodeSingularBytesField(value: &self.type)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    if !self.type.isEmpty {
      try visitor.visitSingularBytesField(value: self.type, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SyftProto_Execution_V1_type, rhs: SyftProto_Execution_V1_type) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SyftProto_Execution_V1_NestedTypeWrapper: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".NestedTypeWrapper"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "nested_type"),
    2: .standard(proto: "nested_type_list"),
    3: .standard(proto: "nested_type_tuple"),
    4: .standard(proto: "nested_type_dict"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._nestedType)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.nestedTypeList)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.nestedTypeTuple)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.nestedTypeDict)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._nestedType {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.nestedTypeList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.nestedTypeList, fieldNumber: 2)
    }
    if !self.nestedTypeTuple.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.nestedTypeTuple, fieldNumber: 3)
    }
    if !self.nestedTypeDict.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.nestedTypeDict, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SyftProto_Execution_V1_NestedTypeWrapper, rhs: SyftProto_Execution_V1_NestedTypeWrapper) -> Bool {
    if lhs._nestedType != rhs._nestedType {return false}
    if lhs.nestedTypeList != rhs.nestedTypeList {return false}
    if lhs.nestedTypeTuple != rhs.nestedTypeTuple {return false}
    if lhs.nestedTypeDict != rhs.nestedTypeDict {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SyftProto_Execution_V1_NestedTypeWrapper.key_value: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = SyftProto_Execution_V1_NestedTypeWrapper.protoMessageName + ".key_value"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.key)
      case 2: try decoder.decodeSingularMessageField(value: &self._value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.key.isEmpty {
      try visitor.visitSingularBytesField(value: self.key, fieldNumber: 1)
    }
    if let v = self._value {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SyftProto_Execution_V1_NestedTypeWrapper.key_value, rhs: SyftProto_Execution_V1_NestedTypeWrapper.key_value) -> Bool {
    if lhs.key != rhs.key {return false}
    if lhs._value != rhs._value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
