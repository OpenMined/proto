// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: syft_proto/execution/v1/type_wrapper.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct SyftProto_Execution_V1_InputTypeDescriptor {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///
  ///A type contains the serialization id and string bytes.
  public var typeName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///
///Message to bufferize a nested type. In a nested type we can have:
///1. A type.
///2. A list of nested types.
///3. A tuple of nested types.
///4. A dict of nested types.
public struct SyftProto_Execution_V1_NestedTypeWrapper {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var nestedTypes: SyftProto_Execution_V1_NestedTypeWrapper.TypeContainer {
    get {return _storage._nestedTypes ?? SyftProto_Execution_V1_NestedTypeWrapper.TypeContainer()}
    set {_uniqueStorage()._nestedTypes = newValue}
  }
  /// Returns true if `nestedTypes` has been explicitly set.
  public var hasNestedTypes: Bool {return _storage._nestedTypes != nil}
  /// Clears the value of `nestedTypes`. Subsequent reads from it will return its default value.
  public mutating func clearNestedTypes() {_uniqueStorage()._nestedTypes = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  ///Wrapper to simulate the behavior of a list in oneof.
  public struct TypeList {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var nestedTypes: [SyftProto_Execution_V1_NestedTypeWrapper] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  ///Wrapper to simulate the behavior of a tuple in oneof.
  public struct TypeTuple {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var nestedTypes: [SyftProto_Execution_V1_NestedTypeWrapper] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  ///Wrapper to simulate the behavior of a map in oneof.
  public struct TypeMap {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var nestedTypes: Dictionary<String,SyftProto_Execution_V1_NestedTypeWrapper> = [:]

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// To create the behavior described above, we need a new message, as
  /// oneof will not permit repeated fields.
  public struct TypeContainer {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var nestedContainer: OneOf_NestedContainer? {
      get {return _storage._nestedContainer}
      set {_uniqueStorage()._nestedContainer = newValue}
    }

    /// First scenario, acts like a list with one element, the type.
    public var nestedType: SyftProto_Execution_V1_InputTypeDescriptor {
      get {
        if case .nestedType(let v)? = _storage._nestedContainer {return v}
        return SyftProto_Execution_V1_InputTypeDescriptor()
      }
      set {_uniqueStorage()._nestedContainer = .nestedType(newValue)}
    }

    /// Second scenario, a list of possibly nested elements.
    public var nestedTypeList: SyftProto_Execution_V1_NestedTypeWrapper.TypeList {
      get {
        if case .nestedTypeList(let v)? = _storage._nestedContainer {return v}
        return SyftProto_Execution_V1_NestedTypeWrapper.TypeList()
      }
      set {_uniqueStorage()._nestedContainer = .nestedTypeList(newValue)}
    }

    /// Third scenario, a tuple of possibly nested elements.
    public var nestedTypeTuple: SyftProto_Execution_V1_NestedTypeWrapper.TypeTuple {
      get {
        if case .nestedTypeTuple(let v)? = _storage._nestedContainer {return v}
        return SyftProto_Execution_V1_NestedTypeWrapper.TypeTuple()
      }
      set {_uniqueStorage()._nestedContainer = .nestedTypeTuple(newValue)}
    }

    /// Last scenario, a dict of possible nested elements.
    public var nestedTypeDict: SyftProto_Execution_V1_NestedTypeWrapper.TypeMap {
      get {
        if case .nestedTypeDict(let v)? = _storage._nestedContainer {return v}
        return SyftProto_Execution_V1_NestedTypeWrapper.TypeMap()
      }
      set {_uniqueStorage()._nestedContainer = .nestedTypeDict(newValue)}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum OneOf_NestedContainer: Equatable {
      /// First scenario, acts like a list with one element, the type.
      case nestedType(SyftProto_Execution_V1_InputTypeDescriptor)
      /// Second scenario, a list of possibly nested elements.
      case nestedTypeList(SyftProto_Execution_V1_NestedTypeWrapper.TypeList)
      /// Third scenario, a tuple of possibly nested elements.
      case nestedTypeTuple(SyftProto_Execution_V1_NestedTypeWrapper.TypeTuple)
      /// Last scenario, a dict of possible nested elements.
      case nestedTypeDict(SyftProto_Execution_V1_NestedTypeWrapper.TypeMap)

    #if !swift(>=4.1)
      public static func ==(lhs: SyftProto_Execution_V1_NestedTypeWrapper.TypeContainer.OneOf_NestedContainer, rhs: SyftProto_Execution_V1_NestedTypeWrapper.TypeContainer.OneOf_NestedContainer) -> Bool {
        switch (lhs, rhs) {
        case (.nestedType(let l), .nestedType(let r)): return l == r
        case (.nestedTypeList(let l), .nestedTypeList(let r)): return l == r
        case (.nestedTypeTuple(let l), .nestedTypeTuple(let r)): return l == r
        case (.nestedTypeDict(let l), .nestedTypeDict(let r)): return l == r
        default: return false
        }
      }
    #endif
    }

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "syft_proto.execution.v1"

extension SyftProto_Execution_V1_InputTypeDescriptor: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".InputTypeDescriptor"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "type_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.typeName)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.typeName.isEmpty {
      try visitor.visitSingularStringField(value: self.typeName, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: SyftProto_Execution_V1_InputTypeDescriptor, rhs: SyftProto_Execution_V1_InputTypeDescriptor) -> Bool {
    if lhs.typeName != rhs.typeName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SyftProto_Execution_V1_NestedTypeWrapper: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".NestedTypeWrapper"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "nested_types"),
  ]

  fileprivate class _StorageClass {
    var _nestedTypes: SyftProto_Execution_V1_NestedTypeWrapper.TypeContainer? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _nestedTypes = source._nestedTypes
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._nestedTypes)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._nestedTypes {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: SyftProto_Execution_V1_NestedTypeWrapper, rhs: SyftProto_Execution_V1_NestedTypeWrapper) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._nestedTypes != rhs_storage._nestedTypes {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SyftProto_Execution_V1_NestedTypeWrapper.TypeList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = SyftProto_Execution_V1_NestedTypeWrapper.protoMessageName + ".TypeList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "nested_types"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.nestedTypes)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.nestedTypes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.nestedTypes, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: SyftProto_Execution_V1_NestedTypeWrapper.TypeList, rhs: SyftProto_Execution_V1_NestedTypeWrapper.TypeList) -> Bool {
    if lhs.nestedTypes != rhs.nestedTypes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SyftProto_Execution_V1_NestedTypeWrapper.TypeTuple: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = SyftProto_Execution_V1_NestedTypeWrapper.protoMessageName + ".TypeTuple"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "nested_types"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.nestedTypes)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.nestedTypes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.nestedTypes, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: SyftProto_Execution_V1_NestedTypeWrapper.TypeTuple, rhs: SyftProto_Execution_V1_NestedTypeWrapper.TypeTuple) -> Bool {
    if lhs.nestedTypes != rhs.nestedTypes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SyftProto_Execution_V1_NestedTypeWrapper.TypeMap: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = SyftProto_Execution_V1_NestedTypeWrapper.protoMessageName + ".TypeMap"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "nested_types"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,SyftProto_Execution_V1_NestedTypeWrapper>.self, value: &self.nestedTypes)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.nestedTypes.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,SyftProto_Execution_V1_NestedTypeWrapper>.self, value: self.nestedTypes, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: SyftProto_Execution_V1_NestedTypeWrapper.TypeMap, rhs: SyftProto_Execution_V1_NestedTypeWrapper.TypeMap) -> Bool {
    if lhs.nestedTypes != rhs.nestedTypes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SyftProto_Execution_V1_NestedTypeWrapper.TypeContainer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = SyftProto_Execution_V1_NestedTypeWrapper.protoMessageName + ".TypeContainer"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "nested_type"),
    2: .standard(proto: "nested_type_list"),
    3: .standard(proto: "nested_type_tuple"),
    4: .standard(proto: "nested_type_dict"),
  ]

  fileprivate class _StorageClass {
    var _nestedContainer: SyftProto_Execution_V1_NestedTypeWrapper.TypeContainer.OneOf_NestedContainer?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _nestedContainer = source._nestedContainer
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: SyftProto_Execution_V1_InputTypeDescriptor?
          if let current = _storage._nestedContainer {
            try decoder.handleConflictingOneOf()
            if case .nestedType(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._nestedContainer = .nestedType(v)}
        case 2:
          var v: SyftProto_Execution_V1_NestedTypeWrapper.TypeList?
          if let current = _storage._nestedContainer {
            try decoder.handleConflictingOneOf()
            if case .nestedTypeList(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._nestedContainer = .nestedTypeList(v)}
        case 3:
          var v: SyftProto_Execution_V1_NestedTypeWrapper.TypeTuple?
          if let current = _storage._nestedContainer {
            try decoder.handleConflictingOneOf()
            if case .nestedTypeTuple(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._nestedContainer = .nestedTypeTuple(v)}
        case 4:
          var v: SyftProto_Execution_V1_NestedTypeWrapper.TypeMap?
          if let current = _storage._nestedContainer {
            try decoder.handleConflictingOneOf()
            if case .nestedTypeDict(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._nestedContainer = .nestedTypeDict(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._nestedContainer {
      case .nestedType(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .nestedTypeList(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case .nestedTypeTuple(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case .nestedTypeDict(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: SyftProto_Execution_V1_NestedTypeWrapper.TypeContainer, rhs: SyftProto_Execution_V1_NestedTypeWrapper.TypeContainer) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._nestedContainer != rhs_storage._nestedContainer {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
