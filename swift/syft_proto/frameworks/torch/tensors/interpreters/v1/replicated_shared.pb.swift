// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: syft_proto/frameworks/torch/tensors/interpreters/v1/replicated_shared.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct SyftProto_Frameworks_Torch_Tensors_Interpreters_V1_ReplicatedSharingTensor {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: SyftProto_Types_Syft_V1_Id {
    get {return _id ?? SyftProto_Types_Syft_V1_Id()}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  public var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  public mutating func clearID() {self._id = nil}

  public var ringSize: SyftProto_Frameworks_Torch_Tensors_Interpreters_V1_ReplicatedSharingTensor.OneOf_RingSize? = nil

  public var ringInt: Int64 {
    get {
      if case .ringInt(let v)? = ringSize {return v}
      return 0
    }
    set {ringSize = .ringInt(newValue)}
  }

  public var ringStr: String {
    get {
      if case .ringStr(let v)? = ringSize {return v}
      return String()
    }
    set {ringSize = .ringStr(newValue)}
  }

  public var dtype: String = String()

  /// It would be natural to capture a {location_id->share} dictionary
  /// as a map, but the key types of a map can't be messages. The ids
  /// use the Id type because they can be either integers or strings.
  /// Capturing them as two parallel lists/arrays isn't ideal but ought
  /// to work okay (given that constraint.)
  public var locationIds: [SyftProto_Types_Syft_V1_Id] = []

  public var shares: [SyftProto_Generic_Pointers_V1_PointerTensor] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_RingSize: Equatable {
    case ringInt(Int64)
    case ringStr(String)

  #if !swift(>=4.1)
    public static func ==(lhs: SyftProto_Frameworks_Torch_Tensors_Interpreters_V1_ReplicatedSharingTensor.OneOf_RingSize, rhs: SyftProto_Frameworks_Torch_Tensors_Interpreters_V1_ReplicatedSharingTensor.OneOf_RingSize) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.ringInt, .ringInt): return {
        guard case .ringInt(let l) = lhs, case .ringInt(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.ringStr, .ringStr): return {
        guard case .ringStr(let l) = lhs, case .ringStr(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _id: SyftProto_Types_Syft_V1_Id? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "syft_proto.frameworks.torch.tensors.interpreters.v1"

extension SyftProto_Frameworks_Torch_Tensors_Interpreters_V1_ReplicatedSharingTensor: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ReplicatedSharingTensor"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "ring_int"),
    3: .standard(proto: "ring_str"),
    4: .same(proto: "dtype"),
    5: .standard(proto: "location_ids"),
    6: .same(proto: "shares"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._id) }()
      case 2: try {
        if self.ringSize != nil {try decoder.handleConflictingOneOf()}
        var v: Int64?
        try decoder.decodeSingularInt64Field(value: &v)
        if let v = v {self.ringSize = .ringInt(v)}
      }()
      case 3: try {
        if self.ringSize != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.ringSize = .ringStr(v)}
      }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.dtype) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.locationIds) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.shares) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._id {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.ringSize {
    case .ringInt?: try {
      guard case .ringInt(let v)? = self.ringSize else { preconditionFailure() }
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 2)
    }()
    case .ringStr?: try {
      guard case .ringStr(let v)? = self.ringSize else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    if !self.dtype.isEmpty {
      try visitor.visitSingularStringField(value: self.dtype, fieldNumber: 4)
    }
    if !self.locationIds.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.locationIds, fieldNumber: 5)
    }
    if !self.shares.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.shares, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: SyftProto_Frameworks_Torch_Tensors_Interpreters_V1_ReplicatedSharingTensor, rhs: SyftProto_Frameworks_Torch_Tensors_Interpreters_V1_ReplicatedSharingTensor) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs.ringSize != rhs.ringSize {return false}
    if lhs.dtype != rhs.dtype {return false}
    if lhs.locationIds != rhs.locationIds {return false}
    if lhs.shares != rhs.shares {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
